/*
 * This file is generated by jOOQ.
 */
package org.autotesting.database;


import org.autotesting.database.tables.Account;
import org.autotesting.database.tables.Candle;
import org.autotesting.database.tables.Currency;
import org.autotesting.database.tables.Trade;
import org.autotesting.database.tables.records.AccountRecord;
import org.autotesting.database.tables.records.CandleRecord;
import org.autotesting.database.tables.records.CurrencyRecord;
import org.autotesting.database.tables.records.TradeRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ACCOUNT_ID }, true);
    public static final UniqueKey<CandleRecord> CANDLE_PKEY = Internal.createUniqueKey(Candle.CANDLE, DSL.name("candle_pkey"), new TableField[] { Candle.CANDLE.CANDLE_ID }, true);
    public static final UniqueKey<CurrencyRecord> CURRENCY_PKEY = Internal.createUniqueKey(Currency.CURRENCY, DSL.name("currency_pkey"), new TableField[] { Currency.CURRENCY.CURRENCY_ID }, true);
    public static final UniqueKey<TradeRecord> TRADE_PKEY = Internal.createUniqueKey(Trade.TRADE, DSL.name("trade_pkey"), new TableField[] { Trade.TRADE.TRADE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CandleRecord, CurrencyRecord> CANDLE__CANDLE_CURRENCY_ID_FKEY = Internal.createForeignKey(Candle.CANDLE, DSL.name("candle_currency_id_fkey"), new TableField[] { Candle.CANDLE.CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.CURRENCY_ID }, true);
    public static final ForeignKey<TradeRecord, AccountRecord> TRADE__TRADE_ACCOUNT_ID_FKEY = Internal.createForeignKey(Trade.TRADE, DSL.name("trade_account_id_fkey"), new TableField[] { Trade.TRADE.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNT_ID }, true);
    public static final ForeignKey<TradeRecord, CurrencyRecord> TRADE__TRADE_CURRENCY_ID_FKEY = Internal.createForeignKey(Trade.TRADE, DSL.name("trade_currency_id_fkey"), new TableField[] { Trade.TRADE.CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.CURRENCY_ID }, true);
}
