/*
 * This file is generated by jOOQ.
 */
package org.autotesting.database.tables;


import java.util.Collection;

import org.autotesting.database.Keys;
import org.autotesting.database.Public;
import org.autotesting.database.tables.Candle.CandlePath;
import org.autotesting.database.tables.Trade.TradePath;
import org.autotesting.database.tables.records.CurrencyRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currency extends TableImpl<CurrencyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.currency</code>
     */
    public static final Currency CURRENCY = new Currency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyRecord> getRecordType() {
        return CurrencyRecord.class;
    }

    /**
     * The column <code>public.currency.currency_id</code>.
     */
    public final TableField<CurrencyRecord, Integer> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.currency.title</code>.
     */
    public final TableField<CurrencyRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CHAR(32), this, "");

    private Currency(Name alias, Table<CurrencyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Currency(Name alias, Table<CurrencyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.currency</code> table reference
     */
    public Currency(String alias) {
        this(DSL.name(alias), CURRENCY);
    }

    /**
     * Create an aliased <code>public.currency</code> table reference
     */
    public Currency(Name alias) {
        this(alias, CURRENCY);
    }

    /**
     * Create a <code>public.currency</code> table reference
     */
    public Currency() {
        this(DSL.name("currency"), null);
    }

    public <O extends Record> Currency(Table<O> path, ForeignKey<O, CurrencyRecord> childPath, InverseForeignKey<O, CurrencyRecord> parentPath) {
        super(path, childPath, parentPath, CURRENCY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CurrencyPath extends Currency implements Path<CurrencyRecord> {
        public <O extends Record> CurrencyPath(Table<O> path, ForeignKey<O, CurrencyRecord> childPath, InverseForeignKey<O, CurrencyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CurrencyPath(Name alias, Table<CurrencyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CurrencyPath as(String alias) {
            return new CurrencyPath(DSL.name(alias), this);
        }

        @Override
        public CurrencyPath as(Name alias) {
            return new CurrencyPath(alias, this);
        }

        @Override
        public CurrencyPath as(Table<?> alias) {
            return new CurrencyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CurrencyRecord, Integer> getIdentity() {
        return (Identity<CurrencyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CurrencyRecord> getPrimaryKey() {
        return Keys.CURRENCY_PKEY;
    }

    private transient CandlePath _candle;

    /**
     * Get the implicit to-many join path to the <code>public.candle</code>
     * table
     */
    public CandlePath candle() {
        if (_candle == null)
            _candle = new CandlePath(this, null, Keys.CANDLE__CANDLE_CURRENCY_ID_FKEY.getInverseKey());

        return _candle;
    }

    private transient TradePath _trade;

    /**
     * Get the implicit to-many join path to the <code>public.trade</code> table
     */
    public TradePath trade() {
        if (_trade == null)
            _trade = new TradePath(this, null, Keys.TRADE__TRADE_CURRENCY_ID_FKEY.getInverseKey());

        return _trade;
    }

    @Override
    public Currency as(String alias) {
        return new Currency(DSL.name(alias), this);
    }

    @Override
    public Currency as(Name alias) {
        return new Currency(alias, this);
    }

    @Override
    public Currency as(Table<?> alias) {
        return new Currency(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(String name) {
        return new Currency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(Name name) {
        return new Currency(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(Table<?> name) {
        return new Currency(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Currency where(Condition condition) {
        return new Currency(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Currency where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Currency where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Currency where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Currency where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Currency where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Currency where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Currency where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Currency whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Currency whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
