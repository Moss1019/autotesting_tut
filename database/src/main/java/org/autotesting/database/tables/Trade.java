/*
 * This file is generated by jOOQ.
 */
package org.autotesting.database.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.autotesting.database.Keys;
import org.autotesting.database.Public;
import org.autotesting.database.tables.Account.AccountPath;
import org.autotesting.database.tables.Currency.CurrencyPath;
import org.autotesting.database.tables.records.TradeRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trade extends TableImpl<TradeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trade</code>
     */
    public static final Trade TRADE = new Trade();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TradeRecord> getRecordType() {
        return TradeRecord.class;
    }

    /**
     * The column <code>public.trade.trade_id</code>.
     */
    public final TableField<TradeRecord, Integer> TRADE_ID = createField(DSL.name("trade_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.trade.bid_price</code>.
     */
    public final TableField<TradeRecord, Double> BID_PRICE = createField(DSL.name("bid_price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.trade.open_time</code>.
     */
    public final TableField<TradeRecord, LocalDateTime> OPEN_TIME = createField(DSL.name("open_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.trade.currency_id</code>.
     */
    public final TableField<TradeRecord, Integer> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.trade.account_id</code>.
     */
    public final TableField<TradeRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER, this, "");

    private Trade(Name alias, Table<TradeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Trade(Name alias, Table<TradeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.trade</code> table reference
     */
    public Trade(String alias) {
        this(DSL.name(alias), TRADE);
    }

    /**
     * Create an aliased <code>public.trade</code> table reference
     */
    public Trade(Name alias) {
        this(alias, TRADE);
    }

    /**
     * Create a <code>public.trade</code> table reference
     */
    public Trade() {
        this(DSL.name("trade"), null);
    }

    public <O extends Record> Trade(Table<O> path, ForeignKey<O, TradeRecord> childPath, InverseForeignKey<O, TradeRecord> parentPath) {
        super(path, childPath, parentPath, TRADE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TradePath extends Trade implements Path<TradeRecord> {
        public <O extends Record> TradePath(Table<O> path, ForeignKey<O, TradeRecord> childPath, InverseForeignKey<O, TradeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TradePath(Name alias, Table<TradeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TradePath as(String alias) {
            return new TradePath(DSL.name(alias), this);
        }

        @Override
        public TradePath as(Name alias) {
            return new TradePath(alias, this);
        }

        @Override
        public TradePath as(Table<?> alias) {
            return new TradePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TradeRecord, Integer> getIdentity() {
        return (Identity<TradeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TradeRecord> getPrimaryKey() {
        return Keys.TRADE_PKEY;
    }

    @Override
    public List<ForeignKey<TradeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRADE__TRADE_CURRENCY_ID_FKEY, Keys.TRADE__TRADE_ACCOUNT_ID_FKEY);
    }

    private transient CurrencyPath _currency;

    /**
     * Get the implicit join path to the <code>public.currency</code> table.
     */
    public CurrencyPath currency() {
        if (_currency == null)
            _currency = new CurrencyPath(this, Keys.TRADE__TRADE_CURRENCY_ID_FKEY, null);

        return _currency;
    }

    private transient AccountPath _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, Keys.TRADE__TRADE_ACCOUNT_ID_FKEY, null);

        return _account;
    }

    @Override
    public Trade as(String alias) {
        return new Trade(DSL.name(alias), this);
    }

    @Override
    public Trade as(Name alias) {
        return new Trade(alias, this);
    }

    @Override
    public Trade as(Table<?> alias) {
        return new Trade(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trade rename(String name) {
        return new Trade(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trade rename(Name name) {
        return new Trade(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trade rename(Table<?> name) {
        return new Trade(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trade where(Condition condition) {
        return new Trade(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trade where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trade where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trade where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trade where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trade where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trade where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Trade where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trade whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Trade whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
